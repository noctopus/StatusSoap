<html>
<script src="http://ajax.aspnetcdn.com/ajax/knockout/knockout-3.0.0.js"></script>

<head>
      <link rel="stylesheet" type="text/css" href="css/bootstrap.css">
      <link rel="stylesheet" type="text/css" href="css/bootstrap-theme.css">
<script type="text/javascript" href="./js/bootstrap.min.js"></script>
</head>
<body id ="app" class="container">
<div id="fb-root"></div>

<div>
  <h1 data-bind = "text:userInfo().name"> </h1>
  
  <h3 data-bind = "text:userInfo().gender  + ' from ' + userInfo().origin"> </h3>
  <blockquote data-bind = "text:userInfo().quotes"> </blockquote>
</div>

<input type="text" class="form-control" placeholder="Text input" data-bind="value:searchQuery">
<br>

<div data-bind = "foreach:viewedPosts">
  <div class="well">
    <div data-bind = "text:from.name"></div>
    <div data-bind = "text:created_time"></div>
    <div data-bind = "highlight:text"></div>
  </div>
</div>

<script>

  var viewModel = {
    userInfo : ko.observable({}),
    userPosts : ko.observableArray([]),
    searchQuery : ko.observable()
    }

    viewModel.viewedPosts = ko.computed(function(){
      var searchTerm = this();
      var newArr = [];
      viewModel.userPosts().forEach(function(element){
        if(searchTerm == null || searchTerm == ""){
        }else if(element.text != null){
          // && element.text.indexOf(searchTerm)>0
          var words = searchTerm.split(",");
          console.log(words, "HEY WODS");
          var ok = false;
          for(var i = 0; i < words.length; i++){
            if(element.text.indexOf(words[i]) > 0){
              ok = true;
            }
          }
          if(newArr.indexOf(element) < 0 && ok == true){
            newArr.push(element);
          }
        }
      });
      console.log(newArr);
      return newArr;

    }, viewModel.searchQuery)
  ko.applyBindings(viewModel, document.getElementById("app"));

  window.fbAsyncInit = function() {
  FB.init({
    appId      : '854011474615306',
    status     : true, // check login status
    cookie     : true, // enable cookies to allow the server to access the session
    xfbml      : true  // parse XFBML
  });

  // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
  // for any authentication related change, such as login, logout or session refresh. This means that
  // whenever someone who was previously logged out tries to log in again, the correct case below 
  // will be handled. 
  FB.Event.subscribe('auth.authResponseChange', function(response) {
    // Here we specify what we do with the response anytime this event occurs. 
    if (response.status === 'connected') {
      testAPI();
    } else if (response.status === 'not_authorized') {
      FB.login(function(response) {
        testAPI();
      }, {scope: 'user_status, read_stream'});
    } else {
      FB.login(function(response) {
        testAPI();
      }, {scope: 'user_status, read_stream'});
    }
  });
  };

  // Load the SDK asynchronously
  (function(d){
   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
   if (d.getElementById(id)) {return;}
   js = d.createElement('script'); js.id = id; js.async = true;
   js.src = "//connect.facebook.net/en_US/all.js";
   ref.parentNode.insertBefore(js, ref);
  }(document));

  // Here we run a very simple test of the Graph API after login is successful. 
  // This testAPI() function is only called in those cases. 
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      if(response.hometown != null && response.hometown.name != null)
      response.origin = response.hometown.name;
      else
        response.origin = "Earth";
      console.log('Good to see you, ' + response.name + '.');
      console.log(response);
      viewModel.userInfo(response);
      getPosts();
    });
  }

  function getPosts() {
    /*
    FB.api('/me/feed', function(response) {
        console.log(response);
        displayPost(response.data);
      }, {perms:'read_stream'})
*/

    FB.api('/me/posts', function(response) {
      console.log(response);
      FB.api("/me/statuses", function(response2){
        console.log(response2, "STATUS");
        var data = response.data.concat(response2.data);
        console.log(data);
        displayPost(data);
      }, {perms : 'read_stream'});
    }, {perms: 'read_stream'})
  }

  function displayPost(response) {
    response = response.filter(function(element){return (element.type == "status" || element.type == "photo")})

    for (var i = 0; i < response.length; i++) {
      if (response[i].story != null) {
        response[i].text = response[i].story;
      }
      else if (response[i].message != null) {
        response[i].text = response[i].message;
      }
      //response[i].dateStr = new Date(response[i].created_time).toUTCString();

    }
    viewModel.userPosts(response);

  }

  ko.bindingHandlers.highlight = {
    init : function(element, value){
      var searchquery = viewModel.searchQuery().split(",");
      var msg = value();
      for(var i = 0; i < searchquery.length; i++){
        var index = msg.indexOf(searchquery[i]);
        if(index >= 0){
          msg = msg.slice(0,index) + "<b><font color='red'>"+searchquery[i] + "</font></b>" + msg.slice(index + searchquery[i].length);
        }
      }
      element.innerHTML = msg;


    }
  }

  function highlight(container,what,spanClass) {
    var content = container.innerHTML,
        pattern = new RegExp('(>[^<.]*)(' + what + ')([^<.]*)','g'),
        replaceWith = '$1<span ' + ( spanClass ? 'class="' + spanClass + '"' : '' ) + '">$2</span>$3',
        highlighted = content.replace(pattern,replaceWith);
    return (container.innerHTML = highlighted) !== content;
  }

function logout(){
  FB.logout(function(response){});
}

function getUserInfo() {
  FB.api(
          "/me",
          function (response) {
            if (response && !response.error) {
              /* handle the results */
            }
        });
}


</script>

<!--
  Below we include the Login Button social plugin. This button uses the JavaScript SDK to
  present a graphical Login button that triggers the FB.login() function when clicked. -->

<fb:login-button show-faces="true" width="200" max-rows="1"></fb:login-button>
<button onclick="logout()">log out</button>



</body>
</html>